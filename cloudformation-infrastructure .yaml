
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless Todo API - Main Stack'

Parameters:
  Environment:
    Type: String
    Default: prod
    Description: Environment name
    
  ProjectName:
    Type: String
    Default: serverless-todo-api
    Description: Project name for resource naming

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        TODO_TABLE_NAME: !Ref TodoTable

Resources:
  # DynamoDB Table
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-todos-${Environment}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: priority
          AttributeType: S
        - AttributeName: dueDate
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: status-createdAt-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: priority-dueDate-index
          KeySchema:
            - AttributeName: priority
              KeyType: HASH
            - AttributeName: dueDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Lambda Functions
  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-create-todo-${Environment}"
      CodeUri: ../../lambda-functions/create-todo/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Events:
        CreateTodoApi:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: POST

  GetTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-get-todos-${Environment}"
      CodeUri: ../../lambda-functions/get-todos/
      Handler: index.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Events:
        GetAllTodosApi:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: GET
        GetTodoByIdApi:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: GET

  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-update-todo-${Environment}"
      CodeUri: ../../lambda-functions/update-todo/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Events:
        UpdateTodoApi:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: PUT

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-delete-todo-${Environment}"
      CodeUri: ../../lambda-functions/delete-todo/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Events:
        DeleteTodoApi:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: DELETE

  # API Gateway
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ProjectName}-api-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      ThrottleConfig:
        RateLimit: 1000
        BurstLimit: 2000
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '$context.requestId $context.identity.sourceIp $context.httpMethod $context.resourcePath $context.status $context.error.message $context.error.messageString'

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-frontend-${Environment}-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub "${FrontendBucket}/*"

  # CloudWatch Log Groups
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ProjectName}-${Environment}"
      RetentionInDays: 14

  CreateTodoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-create-todo-${Environment}"
      RetentionInDays: 14

  GetTodosLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-get-todos-${Environment}"
      RetentionInDays: 14

  UpdateTodoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-update-todo-${Environment}"
      RetentionInDays: 14

  DeleteTodoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-delete-todo-${Environment}"
      RetentionInDays: 14

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-high-error-rate-${Environment}"
      AlarmDescription: "High error rate detected"
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "${ProjectName}-api-${Environment}"

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-high-latency-${Environment}"
      AlarmDescription: "High latency detected"
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "${ProjectName}-api-${Environment}"

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${ProjectName}-api-url-${Environment}"

  FrontendUrl:
    Description: "Frontend website URL"
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub "${ProjectName}-frontend-url-${Environment}"

  TodoTableName:
    Description: "DynamoDB table name"
    Value: !Ref TodoTable
    Export:
      Name: !Sub "${ProjectName}-table-name-${Environment}"

  TodoTableArn:
    Description: "DynamoDB table ARN"
    Value: !GetAtt TodoTable.Arn
    Export:
      Name: !Sub "${ProjectName}-table-arn-${Environment}"
